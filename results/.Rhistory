getScaledTree <- function(s,d){#
	big.tree = read.tree('../PhyloLogit/Ethno_TimeTree_All_star.nwk')#
	big.tree = root(big.tree,'bsq')#
#
	big.tree$edge.length[big.tree$edge.length<=6000] = big.tree$edge.length[big.tree$edge.length<=6000] * s#
	big.tree$edge.length[big.tree$edge.length==60000] = d#
	big.tree$edge.length[big.tree$edge.length==66000] = d+(6000*s)#
	return(big.tree)#
}
par(mfrow=c(2,2))#
#
big.tree = getScaledTree(6000,60000)#
plot(big.tree)#
big.tree = getScaledTree(6000,80000)#
plot(big.tree)#
big.tree = getScaledTree(1000,60000)#
plot(big.tree)#
big.tree = getScaledTree(6000,80000)#
plot(big.tree)#
par(mfrow=c(1,1))
big.tree = getScaledTree(6000,60000)
names(big.tree)
plot(big.tree)
big.tree$edge.length
plot(big.tree)
big.tree = getScaledTree(6000,60000)
plot(big.tree)
par(mfrow=c(2,2))#
big.tree = getScaledTree(1,60000)#
plot(big.tree)#
big.tree = getScaledTree(1,80000)#
plot(big.tree)#
big.tree = getScaledTree(1/6,60000)#
plot(big.tree)#
big.tree = getScaledTree(1/6,80000)#
plot(big.tree)#
par(mfrow=c(1,1))
big.tree = getScaledTree(1/6,60000)
big.tree$edge.length
plot(big.tree)
big.tree = getScaledTree(1/6,60000)
plot(big.tree)
par(mfrow=c(2,2))#
big.tree = getScaledTree(1,60000)#
plot(big.tree,show.tip.label= FALSE)#
big.tree = getScaledTree(1,80000)#
plot(big.tree,show.tip.label= FALSE)#
big.tree = getScaledTree(1/6,60000)#
plot(big.tree,show.tip.label= FALSE)#
big.tree = getScaledTree(1/6,80000)#
plot(big.tree,show.tip.label= FALSE)#
par(mfrow=c(1,1))
big.tree = getScaledTree(1,60000,xlim=80000)
plot(big.tree,show.tip.label= FALSE,xlim=80000)
plot(big.tree,show.tip.label= FALSE,xlim=c(80000))
plot(big.tree,show.tip.label= FALSE,xlim=c(0,80000))
big.tree = getScaledTree(1,60000)
plot(big.tree,show.tip.label= FALSE,xlim=c(0,80000))
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,80000))
par(mfrow=c(2,2))#
big.tree = getScaledTree(1,60000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,80000))#
big.tree = getScaledTree(1,80000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,80000))#
big.tree = getScaledTree(1/6,60000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,80000))#
big.tree = getScaledTree(1/6,80000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,80000))#
par(mfrow=c(1,1))
par(mfrow=c(2,2))#
big.tree = getScaledTree(1,60000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,86000))#
big.tree = getScaledTree(1,80000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,86000))#
big.tree = getScaledTree(1/6,60000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,86000))#
big.tree = getScaledTree(1/6,80000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,86000))#
par(mfrow=c(1,1))
par(mfrow=c(2,2))#
big.tree = getScaledTree(1,60000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,86000))#
big.tree = getScaledTree(1,80000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,86000))#
big.tree = getScaledTree(2,60000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,86000))#
big.tree = getScaledTree(2,80000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,86000))#
par(mfrow=c(1,1))
par(mfrow=c(2,2))#
big.tree = getScaledTree(1/2,40000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,86000))#
big.tree = getScaledTree(1/2,80000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,86000))#
big.tree = getScaledTree(2,60000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,86000))#
big.tree = getScaledTree(2,40000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,86000))#
par(mfrow=c(1,1))
par(mfrow=c(2,2))#
big.tree = getScaledTree(1/2,40000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,86000))#
title("Between = 40,000, Within = 3,000")#
big.tree = getScaledTree(1/2,80000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,86000))#
title("Between = 80,000, Within = 3,000")#
big.tree = getScaledTree(2,40000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,86000))#
title("Between = 40,000, Within = 12,000")#
big.tree = getScaledTree(2,80000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,86000))#
title("Between = 80,000, Within = 12,000")#
par(mfrow=c(1,1))
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,92000))
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,86000))
par(mfrow=c(2,2))#
big.tree = getScaledTree(1/2,40000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,92000))#
title("Between = 40,000, Within = 3,000")#
big.tree = getScaledTree(1/2,80000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,92000))#
title("Between = 80,000, Within = 3,000")#
big.tree = getScaledTree(2,40000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,92000))#
title("Between = 40,000, Within = 12,000")#
big.tree = getScaledTree(2,80000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,92000))#
title("Between = 80,000, Within = 12,000")#
par(mfrow=c(1,1))
pdf('BranchLenghtManip_Graphs.pdf',width=6,height=6)#
par(mfrow=c(2,2))#
big.tree = getScaledTree(1/2,40000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,92000))#
title("Between = 40,000, Within = 3,000")#
big.tree = getScaledTree(1/2,80000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,92000))#
title("Between = 80,000, Within = 3,000")#
big.tree = getScaledTree(2,40000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,92000))#
title("Between = 40,000, Within = 12,000")#
big.tree = getScaledTree(2,80000)#
plot(big.tree,show.tip.label= FALSE,x.lim=c(0,92000))#
title("Between = 80,000, Within = 12,000")#
par(mfrow=c(1,1))#
dev.off()
plot(scale.res.d$logLik~scale.res.d$pow,type='b')
powers
savings.pagel.lambda = 0.757038278406698 #Â Calculated in ../PhyloSignal#
#
scale.res.d = data.frame(pow=NA,t=NA,p=NA,logLik=NA)#
powers = seq(from=0,to=4,by=0.25)#
powers = seq(from=0,to=0.5,by=0.05)#
powers[1] =powers[1]+0.01 #
for(pow in powers){#
#
	big.tree = read.tree('../PhyloLogit/Ethno_TimeTree_All_star.nwk')#
	big.tree = root(big.tree,'bsq')#
#
	big.tree = compute.brlen(big.tree,power = pow)#
	plot(big.tree,main=pow,show.tip.label=FALSE)#
	pagel.big.tree<-corPagel(savings.pagel.lambda,phy=big.tree)#
	pagel.gls<-gls(Resid5ByWALS~FTR,correlation=pagel.big.tree,data=resid)#
summary(pagel.gls)#
	scale.res.d = rbind(scale.res.d,c(pow,summary(pagel.gls)$tTable[2,3:4],pagel.gls$logLik))#
	 }#
#
plot(scale.res.d$logLik~scale.res.d$pow,type='b')
powers
powers = seq(from=0,to=4,by=0.05)#
powers[1] =powers[1]+0.01 #
for(pow in powers){#
#
	big.tree = read.tree('../PhyloLogit/Ethno_TimeTree_All_star.nwk')#
	big.tree = root(big.tree,'bsq')#
#
	big.tree = compute.brlen(big.tree,power = pow)#
	plot(big.tree,main=pow,show.tip.label=FALSE)#
	pagel.big.tree<-corPagel(savings.pagel.lambda,phy=big.tree)#
	pagel.gls<-gls(Resid5ByWALS~FTR,correlation=pagel.big.tree,data=resid)#
summary(pagel.gls)#
	scale.res.d = rbind(scale.res.d,c(pow,summary(pagel.gls)$tTable[2,3:4],pagel.gls$logLik))#
	 }#
#
plot(scale.res.d$logLik~scale.res.d$pow,type='b')
plot(scale.res.d$logLik~scale.res.d$pow,type='p')
max(scale.res.d$logLik)
max(scale.res.d$logLik,na.rm=TRUE)
scale.res.d[scale.res.d$logLik==max(scale.res.d$logLik,na.rm=TRUE),]
scale.res.d[scale.res.d$logLik==min(scale.res.d$logLik,na.rm=TRUE),]
pow = 0.15
big.tree = read.tree('../PhyloLogit/Ethno_TimeTree_All_star.nwk')#
	big.tree = root(big.tree,'bsq')#
#
	big.tree = compute.brlen(big.tree,power = pow)#
	plot(big.tree,main=pow,show.tip.label=FALSE)#
	pagel.big.tree<-corPagel(savings.pagel.lambda,phy=big.tree)#
	pagel.gls<-gls(Resid5ByWALS~FTR,correlation=pagel.big.tree,data=resid)#
summary(pagel.gls)
pagel.gls.pointone = pagel.gls
pow = 4
big.tree = read.tree('../PhyloLogit/Ethno_TimeTree_All_star.nwk')#
	big.tree = root(big.tree,'bsq')#
#
	big.tree = compute.brlen(big.tree,power = pow)#
	plot(big.tree,main=pow,show.tip.label=FALSE)#
	pagel.big.tree<-corPagel(savings.pagel.lambda,phy=big.tree)#
	pagel.gls<-gls(Resid5ByWALS~FTR,correlation=pagel.big.tree,data=resid)#
summary(pagel.gls)
anova(pagel.gls.pointone,pagel.gls)
anova.gls(pagel.gls.pointone,pagel.gls)
anova(pagel.gls.pointone,pagel.gls)
anova(pagel.gls.pointone,pagel.gls,test=TRUE)
anova(pagel.gls,pagel.gls.pointone,test=TRUE)
p1 = update(pagel.gls.pointone)
p2 = update(pagel.gls)
anova(p1,p2)
p1 = update(pagel.gls.pointone,method='ML')
p2 = update(pagel.gls,method='ML')
anova(p1,p2)
anova(p2,p1)
anova(pagel.gls.pointone)
anova(pagel.gls)
?update
pow = 4#
big.tree = read.tree('../PhyloLogit/Ethno_TimeTree_All_star.nwk')#
big.tree = root(big.tree,'bsq')#
#
big.tree = compute.brlen(big.tree,power = pow)#
plot(big.tree,main=pow,show.tip.label=FALSE)#
pagel.big.tree<-corPagel(savings.pagel.lambda,phy=big.tree)#
pagel.gls<-gls(Resid5ByWALS~FTR,correlation=pagel.big.tree,data=resid)
# Best model#
pow = 0.15#
big.tree = read.tree('../PhyloLogit/Ethno_TimeTree_All_star.nwk')#
big.tree = root(big.tree,'bsq')#
#
big.tree = compute.brlen(big.tree,power = pow)#
plot(big.tree,main=pow,show.tip.label=FALSE)#
pagel.big.tree<-corPagel(savings.pagel.lambda,phy=big.tree)#
pagel.gls.1<-gls(Resid5ByWALS~FTR,correlation=pagel.big.tree,data=resid)#
#
# Worst model#
pow = 4#
big.tree = read.tree('../PhyloLogit/Ethno_TimeTree_All_star.nwk')#
big.tree = root(big.tree,'bsq')#
#
big.tree = compute.brlen(big.tree,power = pow)#
plot(big.tree,main=pow,show.tip.label=FALSE)#
pagel.big.tree<-corPagel(savings.pagel.lambda,phy=big.tree)#
pagel.gls.2<-gls(Resid5ByWALS~FTR,correlation=pagel.big.tree,data=resid)#
#
p1 = update(pagel.gls.1,method='ML')#
p2 = update(pagel.gls.2,method='ML')#
anova(p1,p2)
hist(big.tree$edge.length)
max(big.tree$edge.length)
max(big.tree$edge.length[big.tree$edge.length<1])
big.tree$edge.length[big.tree$edge.length<1]
big.tree$edge.length[big.tree$edge.length<1.0]
max(big.tree$edge.length[big.tree$edge.length<1.0])
max(big.tree$edge.length[big.tree$edge.length<0.99])
max(big.tree$edge.length[big.tree$edge.length<0.97])
max(big.tree$edge.length[big.tree$edge.length<0.90])
max(big.tree$edge.length[big.tree$edge.length<0.95])
max(big.tree$edge.length[big.tree$edge.length<0.98])
66000*0.98
66000-(66000*0.98)
66000-(66000*0.01)
60000-(60000*0.01)
60000-(60000*1)
66000-(66000*0.98)
60000-(60000*0.98)
pow = 1
pow
big.tree = read.tree('../PhyloLogit/Ethno_TimeTree_All_star.nwk')#
big.tree = root(big.tree,'bsq')#
big.tree = compute.brlen(big.tree,power = pow)
max(big.tree$edge.length[big.tree$edge.length<0.99])
pow = 4
big.tree = read.tree('../PhyloLogit/Ethno_TimeTree_All_star.nwk')#
big.tree = root(big.tree,'bsq')#
big.tree = compute.brlen(big.tree,power = pow)
max(big.tree$edge.length[big.tree$edge.length<0.99])
pow = 0.01
big.tree = read.tree('../PhyloLogit/Ethno_TimeTree_All_star.nwk')#
big.tree = root(big.tree,'bsq')#
big.tree = compute.brlen(big.tree,power = pow)
max(big.tree$edge.length[big.tree$edge.length<0.99])
sort(big.tree$edge.length[big.tree$edge.length<0.99])
sort(unique(big.tree$edge.length[big.tree$edge.length<0.99]))
pow
pow = 1
big.tree = read.tree('../PhyloLogit/Ethno_TimeTree_All_star.nwk')#
big.tree = root(big.tree,'bsq')#
big.tree = compute.brlen(big.tree,power = pow)
sort(unique(big.tree$edge.length[big.tree$edge.length<0.99]))
31*.9
sort(unique(big.tree$edge.length[big.tree$edge.length<0.99]))[28]
sort((big.tree$edge.length[big.tree$edge.length<0.99]))
sort((big.tree$edge.length[big.tree$edge.length<0.99]))[145*0.9]
for(i in c(0.01,1,4)){#
big.tree = getGrafenTree(i)#
so =sort((big.tree$edge.length[big.tree$edge.length<0.99]))#
print(c(i,so[length(so)*0.9])#
}
for(i in c(0.01,1,4)){#
big.tree = getGrafenTree(i)#
so =sort((big.tree$edge.length[big.tree$edge.length<0.99]))#
print(c(i,so[length(so)*0.9]))#
}
getGrafenTree <- function(pow){#
	big.tree = read.tree('../PhyloLogit/Ethno_TimeTree_All_star.nwk')#
	big.tree = root(big.tree,'bsq')#
	big.tree = compute.brlen(big.tree,power = pow)#
	return(big.tree)#
}
for(i in c(0.01,1,4)){#
big.tree = getGrafenTree(i)#
so =sort((big.tree$edge.length[big.tree$edge.length<0.99]))#
print(c(i,so[length(so)*0.9]))#
}
for(i in c(0.01,1,4)){#
big.tree = getGrafenTree(i)#
so =sort((big.tree$edge.length[big.tree$edge.length<0.99]))#
print(c(i,so[length(so)*0.9],so[length(so)*0.9]*60000))#
}
for(i in c(0.01,1,2)){#
big.tree = getGrafenTree(i)#
so =sort((big.tree$edge.length[big.tree$edge.length<0.99]))#
print(c(i,so[length(so)*0.9],so[length(so)*0.9]*60000))#
}
2.200091e+03
for(i in c(0.01,1,3)){#
big.tree = getGrafenTree(i)#
so =sort((big.tree$edge.length[big.tree$edge.length<0.99]))#
print(c(i,so[length(so)*0.9],so[length(so)*0.9]*60000))#
}
3.490556e+02
5.796838e+04
1.659574e+04
3.490556e+02
scale.res.d = data.frame(pow=NA,t=NA,p=NA,logLik=NA)#
powers = seq(from=0,to=3,by=0.1)#
powers[1] =powers[1]+0.01 #
for(pow in powers){#
	big.tree = getGrafenTree(pow)#
	plot(big.tree,main=pow,show.tip.label=FALSE)#
	pagel.big.tree<-corPagel(savings.pagel.lambda,phy=big.tree)#
	pagel.gls<-gls(Resid5ByWALS~FTR,correlation=pagel.big.tree,data=resid)#
#summary(pagel.gls)#
	scale.res.d = rbind(scale.res.d,c(pow,summary(pagel.gls)$tTable[2,3:4],pagel.gls$logLik))#
	 }#
#
plot(scale.res.d$logLik~scale.res.d$pow,type='p')#
#
pdf('BranchDepthManip_PGLS.pdf',width=4,height=4)#
plot(scale.res.d$p~scale.res.d$pow,type='b',xlab=expression(paste("Grafen's ",rho," (recency of splits)")),ylab='PGLS p value',ylim=c(0,0.08))#
dev.off()
for(i in c(0.01,1,3,0.15)){#
big.tree = getGrafenTree(i)#
so =sort((big.tree$edge.length[big.tree$edge.length<0.99]))#
print(c(i,so[length(so)*0.9],so[length(so)*0.9]*60000))#
}
3.736724e+04
big.tree = getGrafenTree(0.15)
plot(big.tree,main=pow,show.tip.label=FALSE)
pagel.big.tree<-corPagel(savings.pagel.lambda,phy=big.tree)
pagel.gls.1<-gls(Resid5ByWALS~FTR,correlation=pagel.big.tree,data=resid)
pagel.gls.1
summary(pagel.gls.1)
i 0.15
i = 1
big.tree = getGrafenTree(i)#
so =sort((big.tree$edge.length[big.tree$edge.length<0.99]))
min(big.tree$edge.length)
min(big.tree$edge.length) * 60000
for(i in c(0.01,1,3,0.15)){#
big.tree = getGrafenTree(i)#
print(c(i,min(big.tree$edge.length),min(big.tree$edge.length)*60000))#
}
3.191715e+01
plot(big.tree)
?plot.phylo
nodelabels(1:10,1:10)
nodelabels(1:50,1:50)
big.tree$edge.length
big.tree$edge.length[50]
nodelabels(1:100,1:100)
big.tree
nodelabels(1:150,1:150)
big.tree$edge.length[127]
big.tree$edge.length[128]
big.tree$edge.length[3]
big.tree$edge.length[2]
big.tree$edge.length[95]
big.tree$edge
plot(big.tree)#
nodelabels(1:150,1:150,cex=0.5)
names(big.tree$edge)
big.tree$edge[big.tree$edge[,1]==21 & big.tree$edge[,2]==128]
big.tree$edge[,1]==21 & big.tree$edge[,2]==128
big.tree$edge[,1]==128 & big.tree$edge[,2]==21
big.tree$edge[big.tree$edge[,1]==128 & big.tree$edge[,2]==21]
which(big.tree$edge[,1]==128 & big.tree$edge[,2]==21)
big.tree$edge.length[which(big.tree$edge[,1]==128 & big.tree$edge[,2]==21)]
text(0.5,"!")
text(0.5,">>>>>>>>>>>>>>>>>>>>")
edgelabels(1:100,1:100)
for(i in c(0.01,1,3,0.15)){#
big.tree = getGrafenTree(i)#
m = big.tree$edge.length[84]#
print(c(i,m,m*60000))#
}
7.223833e-02
7.223833e-02
3.035163e+04
i = 0.1
i = 0.01
big.tree = getGrafenTree(i)
big.tree = getGrafenTree(i)#
plot(big.tree)#
edgelabels(1:100,1:100,cex=0.5)
m = big.tree$edge.length[61]
print(c(i,m,m*60000))
5.733502e+04
pow  = 1
big.tree = getGrafenTree(i)#
plot(big.tree)#
edgelabels(1:100,1:100,cex=0.5)
m = big.tree$edge.length[61]
print(c(i,m,m*60000))
5.733502e+04
i = 1
big.tree = getGrafenTree(i)#
plot(big.tree)#
edgelabels(1:100,1:100,cex=0.5)
m = big.tree$edge.length[61]
print(c(i,m,m*60000))
i = 3
big.tree = getGrafenTree(i)#
plot(big.tree)#
edgelabels(1:100,1:100,cex=0.5)
print(c(i,m,m*60000))
m = big.tree$edge.length[61]
print(c(i,m,m*60000))
7.223833e-02
i = 0.15
big.tree = getGrafenTree(i)#
plot(big.tree)#
edgelabels(1:100,1:100,cex=0.5)#
#
m = big.tree$edge.length[61]#
print(c(i,m,m*60000))
3.035163e+04
for(i in c(0.01,1,3,0.15)){#
big.tree = getGrafenTree(i)#
plot(big.tree)#
edgelabels(1:100,1:100,cex=0.5)#
#
m = big.tree$edge.length[61]#
first.split = big.tree$edge.length[1]#
print(c(i,m,m*60000))#
print(c(i,first.split,(1-m-first.split)*60000))#
}
2.075130e+03
2013 - 630
setwd("~/Desktop/Stuff/FoxWolf/ZooResults")
?date
d = data.frame()
for(folder in list.dirs('results')){#
	day = substr(folder,1,2)#
	month = substr(folder,4,5)#
	dx =read.table(paste('results/',folder,'/rounds.csv',sep=''),header=TRUE,sep=',')#
	dx$origin = folder#
	date()#
	d = rbind(d,dx)#
}
paste('results/',folder,'/rounds.csv',sep='')
list.dirs('results/')
list.dirs('results')
?list.dirs
list.dirs('results',recursive=FALSE)
list.dirs('results',recursive=FALSE,full.names=FALSE)
list.dirs('results',recursive=FALSE,include.dirs=FALSE)
list.dirs('results',recursive=FALSE,full.names=FALSE)
list.dirs('results',recursive=FALSE,full.names=FALSE)[1]
substr(list.dirs('results',recursive=FALSE,full.names=FALSE)[1],9,10)
substr(list.dirs('results',recursive=FALSE,full.names=FALSE)[1],12,13)
d = data.frame()#
for(folder in list.dirs('results',recursive=FALSE)){#
	day = substr(folder,9,10)#
	month = substr(folder,12,13)#
	dx =read.table(paste(folder,'/rounds.csv',sep=''),header=TRUE,sep=',')#
	dx$origin = folder#
	d = rbind(d,dx)#
}
paste(folder,'/rounds.csv',sep='')
d = data.frame()#
for(folder in list.dirs('results',recursive=FALSE)){#
	day = substr(folder,9,10)#
	month = substr(folder,12,13)#
	dx =read.table(paste(folder,'/results/rounds.csv',sep=''),header=TRUE,sep=',')#
	dx$origin = folder#
	d = rbind(d,dx)#
}
head(d)
levels(factor(d$RT))
plotmeans(all.correct~latency,data=d[d$numerals==5,],ylab='Percentage Correct (%)', xlab='Latency (ms)',ylim=c(0,100),p=0.95,cex=2)
setwd("~/Desktop/Stuff/FoxWolf/ZooResults")#
#
d = data.frame()#
for(folder in list.dirs('results',recursive=FALSE)){#
	day = substr(folder,9,10)#
	month = substr(folder,12,13)#
	dx =read.table(paste(folder,'/results/rounds.csv',sep=''),header=TRUE,sep=',')#
	dx$origin = folder#
	d = rbind(d,dx)#
}#
#
d$all.correct = d$selected == d$correct#
#
#
plotmeans(all.correct~latency,data=d[d$numerals==5,],ylab='Percentage Correct (%)', xlab='Latency (ms)',ylim=c(0,100),p=0.95,cex=2)
names(d)
head(d$selected)
head(d$correct#
)
head(d$correct) == head(d$selected)
d$selected = as.character(d$selected)
d$correct = as.character(d$correct)
d$all.correct = d$selected == d$correct
plotmeans(all.correct~latency,data=d[d$numerals==5,],ylab='Percentage Correct (%)', xlab='Latency (ms)',ylim=c(0,100),p=0.95,cex=2)
plotmeans(all.correct*100~latency,data=d[d$numerals==5,],ylab='Percentage Correct (%)', xlab='Latency (ms)',ylim=c(0,100),p=0.95,cex=2)
plotmeans(all.correct*100~latency,data=d[d$numerals==5,],ylab='Percentage Correct (%)', xlab='Latency (ms)',ylim=c(0,100),xlim=c(6:1),p=0.95,cex=2)
plotmeans(all.correct*100~latency,data=d[d$numerals==5,],ylab='Percentage Correct (%)', xlab='Latency (ms)',ylim=c(0,100),p=0.95,cex=2)
plotmeans(all.correct*100~latency,data=d[d$numerals==5,],ylab='Percentage Correct (%)', xlab='Latency (ms)',ylim=c(0,100),xlim=c(6,1),p=0.95,cex=2)
points(6,78.5,pch=17)
points(1,36,pch=17)#
points(3.5,65,pch=17)#
points(6,78.5,pch=17)
names(d)
levels(factor(name))
levels(factor(d$name))
dim(d)
plotmeans(tapply(d$all.correct,d$name,mean)*100~tapply(d$latency,d$name,mean),data=d[d$numerals==5,],ylab='Percentage Correct (%)', xlab='Latency (ms)',ylim=c(0,100),p=0.95,cex=2)
plotmeans(tapply(d$all.correct,d$name,mean)*100~tapply(d$latency,d$name,head,n=1),data=d[d$numerals==5,],ylab='Percentage Correct (%)', xlab='Latency (ms)',ylim=c(0,100),p=0.95,cex=2)
tapply(d$all.correct,d$name,mean)
tapply(d$latency,d$name,head,n=1)
hist(tapply(d$all.correct,d$name,mean)*100)
hist(tapply(d$all.correct,d$name,mean)*100,data=d[d$latency==210,])
hist(tapply(d[d$latency==210,]$all.correct,d$name,mean)*100)
hist(tapply(d[d$latency==210,]$all.correct,d[d$latency==210,]$name,mean)*100)
names(d)
hist(tapply(d[d$latency==210 & d$numerals==5,]$all.correct,d[d$latency==210 & d$numerals==5,]$name,mean)*100)
hist(tapply(d[d$latency==210 & d$numerals==5,]$all.correct,d[d$latency==210 & d$numerals==5,]$name,mean)*100,main = "Individuals' mean score on 5 numerals at 210ms")
ind.mean.5nums.210ms
ind.mean.5nums.210ms = tapply(d[d$latency==210 & d$numerals==5,]$all.correct,d[d$latency==210 & d$numerals==5,]$name,mean)*100
hist(ind.mean.5nums.210ms,main = "Individuals' mean score on 5 numerals at 210ms")
ind.mean.5nums.210ms
ind.mean.5nums.210ms[ind.mean.5nums.210ms==100]
ind.mean.5nums.210ms
ind.mean.5nums.210ms[ind.mean.5nums.210ms==100 & !is.na(ind.mean.5nums.210ms)]
ind.ntrials.5nums.210ms = tapply(d[d$latency==210 & d$numerals==5,]$all.correct,d[d$latency==210 & d$numerals==5,]$name,length)#
#
ind.mean.5nums.210ms[ind.mean.5nums.210ms==100 & !is.na(ind.mean.5nums.210ms)]#
ind.ntrials.5nums.210ms[ind.mean.5nums.210ms==100 & !is.na(ind.mean.5nums.210ms)]
ind.mean.5nums.210ms[ind.mean.5nums.210ms>90 & !is.na(ind.mean.5nums.210ms)]#
ind.ntrials.5nums.210ms[ind.mean.5nums.210ms>90 & !is.na(ind.mean.5nums.210ms)]
ind.ntrials.5nums.210ms[ind.mean.5nums.210ms>40 & !is.na(ind.mean.5nums.210ms)]
setwd("~/Desktop/Stuff/FoxWolf/ZooResults/results")#
#
d =read.table('05_13%H_38_19/results/rounds.csv',header=TRUE,sep=',')#
#
d$selected = as.character(d$selected)#
d$correct = as.character(d$correct)#
#
d$all.correct = d$selected == d$correct#
#
#
plotmeans(all.correct*100~latency,data=d[d$numerals==5,],ylab='Percentage Correct (%)', xlab='Latency (ms)',ylim=c(0,100),p=0.95,cex=2)#
points(1,36,pch=17)#
points(3.5,65,pch=17)#
points(6,78.5,pch=17)#
#
ind.mean.5nums.210ms = tapply(d[d$latency==210 & d$numerals==5,]$all.correct,d[d$latency==210 & d$numerals==5,]$name,mean,na.rm=TRUE)*100#
#
hist(ind.mean.5nums.210ms,main = "Individuals' mean score on 5 numerals at 210ms")#
#
ind.ntrials.5nums.210ms = tapply(d[d$latency==210 & d$numerals==5,]$all.correct,d[d$latency==210 & d$numerals==5,]$name,length)#
#
# People getting 100% correct on 210 milliseconds for 5 trials#
ind.mean.5nums.210ms[ind.mean.5nums.210ms==100 & !is.na(ind.mean.5nums.210ms)]#
# And the number of trials they did it for#
ind.ntrials.5nums.210ms[ind.mean.5nums.210ms==100 & !is.na(ind.mean.5nums.210ms)]
